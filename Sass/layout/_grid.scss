.row {
  // Use max-width as will always try to use full width stated, if not available and on a smaller viewport will always to fill 100% of the width.
  max-width: $gird-width; // equal to 1140px
  margin: 0 auto; // Centers a block element inside another block element.

  &:not(:last-child) { // row:not(:last-child) - Targets and applies CSS to child elements all but except the last child which won't inherit css stated.
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }

  }

  @include respond(tab-port) {
    max-width: 50rem; // Reduce the max-width of all rows so all elements inside rows become more central on page and dont stretch to the edges of window.
    padding: 0 3rem;
  }

  @include clearfix; // Clear fix mixin inserted here to clear floats on all rows.

  [class^="col-"] { // Targets all class name attributes that start with col- will apply css to all classes that contain this. ^ = indicates to target all that start with $ = indicates to target all that finish with.
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal; // Ensures that no margin is applied to the right of the last child element as to create a gap in between both columns.

      @include respond(tab-port) {
        margin-right: 0; // Margin right is no longer needed when columns switch to 100% width as will be occupying the full space.
        margin-bottom: $gutter-vertical-small; // adds a margin to the bottom of each column to space them as they stack.
      }

    }

    @include respond(tab-port) {
      width: 100%!important; // Sets all columns to display with a width of 100% at tab-port pixel sizes and below - columns will stack on top of eachother.
    }

  }

  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2); // Calculates the entire width of column minus the units of margin occupying the sides and divieds by 2 to fit both columns. For Sass variables need to wrap in #{} in order to work.

  }

  .col-1-of-3 {
    width: calc((100% - 2 * #{$gutter-horizontal}) / 3); // Calculates 100% of total width minus the 2 gutters inbetween the 3 columns, multiplied by the horizontal value and divided by 3 for the 3 columns in the row.
  }

  .col-2-of-3 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }

  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }

  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }

  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}


